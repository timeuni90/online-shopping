<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.timeuni.dao.CommodityMapper">
	<resultMap id="BaseResultMap"
		type="com.timeuni.bean.Commodity">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="seller_id" jdbcType="INTEGER"
			property="sellerId" />
		<result column="title" jdbcType="VARCHAR" property="title" />
		<result column="subtitle" jdbcType="VARCHAR"
			property="subtitle" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="is_delete" jdbcType="BIT" property="isDelete" />
		<result column="cover_image" jdbcType="VARCHAR"
			property="coverImage" />
	</resultMap>
	<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
		type="com.timeuni.bean.Commodity">
		<result column="detail" jdbcType="LONGVARCHAR"
			property="detail" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, seller_id, title, subtitle, status, is_delete,
		cover_image
	</sql>
	<sql id="Blob_Column_List">
		detail
	</sql>
	<select id="selectByExampleWithBLOBs"
		parameterType="com.timeuni.bean.CommodityExample"
		resultMap="ResultMapWithBLOBs">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_commodity
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByExample"
		parameterType="com.timeuni.bean.CommodityExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from tb_commodity
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey"
		parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_commodity
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from tb_commodity
		where id =
		#{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample"
		parameterType="com.timeuni.bean.CommodityExample">
		delete from tb_commodity
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.timeuni.bean.Commodity">
		insert into tb_commodity (id,
		seller_id, title,
		subtitle, status, is_delete,
		cover_image, detail)
		values (#{id,jdbcType=INTEGER}, #{sellerId,jdbcType=INTEGER},
		#{title,jdbcType=VARCHAR},
		#{subtitle,jdbcType=VARCHAR},
		#{status,jdbcType=INTEGER}, #{isDelete,jdbcType=BIT},
		#{coverImage,jdbcType=VARCHAR}, #{detail,jdbcType=LONGVARCHAR})
	</insert>
	<insert id="insertSelective"
		parameterType="com.timeuni.bean.Commodity" useGeneratedKeys="true"
		keyProperty="id">
		insert into tb_commodity
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="sellerId != null">
				seller_id,
			</if>
			<if test="title != null">
				title,
			</if>
			<if test="subtitle != null">
				subtitle,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="isDelete != null">
				is_delete,
			</if>
			<if test="coverImage != null">
				cover_image,
			</if>
			<if test="detail != null">
				detail,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="sellerId != null">
				#{sellerId,jdbcType=INTEGER},
			</if>
			<if test="title != null">
				#{title,jdbcType=VARCHAR},
			</if>
			<if test="subtitle != null">
				#{subtitle,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="isDelete != null">
				#{isDelete,jdbcType=BIT},
			</if>
			<if test="coverImage != null">
				#{coverImage,jdbcType=VARCHAR},
			</if>
			<if test="detail != null">
				#{detail,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="com.timeuni.bean.CommodityExample"
		resultType="java.lang.Long">
		select count(*) from tb_commodity
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update tb_commodity
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.sellerId != null">
				seller_id = #{record.sellerId,jdbcType=INTEGER},
			</if>
			<if test="record.title != null">
				title = #{record.title,jdbcType=VARCHAR},
			</if>
			<if test="record.subtitle != null">
				subtitle = #{record.subtitle,jdbcType=VARCHAR},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=INTEGER},
			</if>
			<if test="record.isDelete != null">
				is_delete = #{record.isDelete,jdbcType=BIT},
			</if>
			<if test="record.coverImage != null">
				cover_image = #{record.coverImage,jdbcType=VARCHAR},
			</if>
			<if test="record.detail != null">
				detail = #{record.detail,jdbcType=LONGVARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExampleWithBLOBs" parameterType="map">
		update tb_commodity
		set id = #{record.id,jdbcType=INTEGER},
		seller_id =
		#{record.sellerId,jdbcType=INTEGER},
		title =
		#{record.title,jdbcType=VARCHAR},
		subtitle =
		#{record.subtitle,jdbcType=VARCHAR},
		status =
		#{record.status,jdbcType=INTEGER},
		is_delete =
		#{record.isDelete,jdbcType=BIT},
		cover_image =
		#{record.coverImage,jdbcType=VARCHAR},
		detail =
		#{record.detail,jdbcType=LONGVARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update tb_commodity
		set id = #{record.id,jdbcType=INTEGER},
		seller_id =
		#{record.sellerId,jdbcType=INTEGER},
		title =
		#{record.title,jdbcType=VARCHAR},
		subtitle =
		#{record.subtitle,jdbcType=VARCHAR},
		status =
		#{record.status,jdbcType=INTEGER},
		is_delete =
		#{record.isDelete,jdbcType=BIT},
		cover_image =
		#{record.coverImage,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.timeuni.bean.Commodity">
		update tb_commodity
		<set>
			<if test="sellerId != null">
				seller_id = #{sellerId,jdbcType=INTEGER},
			</if>
			<if test="title != null">
				title = #{title,jdbcType=VARCHAR},
			</if>
			<if test="subtitle != null">
				subtitle = #{subtitle,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="isDelete != null">
				is_delete = #{isDelete,jdbcType=BIT},
			</if>
			<if test="coverImage != null">
				cover_image = #{coverImage,jdbcType=VARCHAR},
			</if>
			<if test="detail != null">
				detail = #{detail,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs"
		parameterType="com.timeuni.bean.Commodity">
		update tb_commodity
		set seller_id =
		#{sellerId,jdbcType=INTEGER},
		title = #{title,jdbcType=VARCHAR},
		subtitle = #{subtitle,jdbcType=VARCHAR},
		status =
		#{status,jdbcType=INTEGER},
		is_delete = #{isDelete,jdbcType=BIT},
		cover_image = #{coverImage,jdbcType=VARCHAR},
		detail =
		#{detail,jdbcType=LONGVARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.timeuni.bean.Commodity">
		update tb_commodity
		set seller_id =
		#{sellerId,jdbcType=INTEGER},
		title = #{title,jdbcType=VARCHAR},
		subtitle = #{subtitle,jdbcType=VARCHAR},
		status =
		#{status,jdbcType=INTEGER},
		is_delete = #{isDelete,jdbcType=BIT},
		cover_image = #{coverImage,jdbcType=VARCHAR}
		where id =
		#{id,jdbcType=INTEGER}
	</update>

	<!-- 以下为新增SQL -->

	<resultMap extends="ResultMapWithBLOBs"
		type="com.timeuni.bean.Commodity" id="CommodityMapWithSeller">
		<result column="min_price" jdbcType="REAL" property="minPrice" />
		<result column="max_price" jdbcType="REAL" property="maxPrice" />
		<result column="min_promotion_price" jdbcType="REAL"
			property="minPromotionPrice" />
		<result column="max_promotion_price" jdbcType="REAL"
			property="maxPromotionPrice" />
		<result column="month_sale" property="monthSale" />
		<result column="comment_quantity" property="commentQuantity" />
		<association property="seller"
			javaType="com.timeuni.bean.Seller">
			<id column="seller_id" property="id" />
			<result column="activity" property="activity" />
			<result column="city_id" property="cityId" />
			<result column="detail_address" property="detailAddress" />
			<result column="password" property="password" />
			<result column="register_time" property="registerTime" />
			<result column="store_cover" property="storeCover" />
			<result column="store_name" property="storeName" />
			<result column="store_status" property="storeStatus" />
			<result column="username" property="username" />
		</association>
	</resultMap>

	<!-- List<Commodity> selectByKey(String key, Integer sortType); -->
	<select id="selectByKey" resultType="com.timeuni.bean.Commodity">
		SELECT
		c.id,
		c.title,
		CONCAT(
		#{coverLocation}, c.cover_image) cover_image,
		MIN(cv.price) min_price,
		tmp.commentQuantity
		FROM
		tb_commodity c
		INNER JOIN tb_commodity_select_property csp ON c.id = csp.commodity_id
		INNER JOIN tb_commodity_variable cv ON csp.select_property_row =
		cv.select_property_row
		INNER JOIN (
		SELECT
		c.id commodity_id,
		COUNT(co.id) commentQuantity
		FROM
		tb_commodity c
		LEFT JOIN tb_comment co ON c.id = co.commodity_id
		GROUP BY
		c.id
		) tmp ON c.id = tmp.commodity_id
		WHERE
		c.title LIKE #{key}
		GROUP BY
		c.id
		<if test="sortType==0">
			ORDER BY c.create_time DESC
		</if>
		<if test="sortType==1">
			ORDER BY c.create_time ASC
		</if>
		<if test="sortType==2">
			ORDER BY MIN(cv.price) DESC
		</if>
		<if test="sortType==3">
			ORDER BY MIN(cv.price) ASC
		</if>
		<if test="sortType==4">
			ORDER BY tmp.commentQuantity DESC
		</if>
	</select>

	<!-- public Commodity selectByCommodityIdFromMultiTable(Integer commodityId); -->
	<select id="selectByCommodityIdFromMultiTable"
		resultMap="CommodityMapWithSeller">
		SELECT
		c.id,
		c.seller_id,
		c.title,
		c.subtitle,
		CONCAT(#{commodityCoverLoc}, c.cover_image)
		cover_image,
		MIN(cv.price)
		min_price,
		MAX(cv.price) max_price,
		MIN(cv.promotion_price)
		min_promotion_price,
		MAX(cv.promotion_price) max_promotion_price,
		s.store_name,
		s.activity,
		CONCAT(#{storeLogoLoc}, s.store_cover)
		store_cover
		FROM
		tb_commodity c
		INNER JOIN tb_seller s ON
		c.seller_id =
		s.id
		INNER JOIN tb_commodity_select_property csp ON c.id
		=
		csp.commodity_id
		INNER JOIN tb_commodity_variable cv ON
		csp.select_property_row =
		cv.select_property_row
		WHERE
		c.id =
		#{commodityId}
	</select>

	<!-- public Integer selectMonthSaleByCommodityId(Integer commodityId); -->
	<select id="selectMonthSaleByCommodityId" resultType="int">
		SELECT
		IFNULL(SUM(od.quantity), 0) month_sale
		FROM
		tb_commodity c
		INNER JOIN
		tb_order_detail od ON c.id = od.commodity_id
		INNER JOIN tb_order o ON
		o.id = od.order_id
		WHERE
		c.id = #{commodityId}
		AND ABS(
		DATEDIFF(o.generate_time, NOW())
		) &lt; 31
	</select>

	<!-- public Integer selectCountCommodityComment(Integer commodityId); -->
	<select id="selectCountCommodityComment" resultType="int">
		SELECT
		IFNULL(count(cmt.commodity_id), 0) comment_quantity
		FROM
		tb_commodity
		cdy
		INNER JOIN tb_comment cmt ON cdy.id = cmt.commodity_id
		WHERE
		cdy.id =
		#{commodityId}
	</select>

	<!-- public List<Commodity> selectRotCommodities(String coverLocation); -->
	<select id="selectRotCommodities"
		resultMap="CommodityMapWithSeller">
		SELECT
		c.id,
		CONCAT(
		#{coverLocation},
		c.cover_image
		)
		cover_image,
		c.title,
		tmp.min_price,
		tmp.min_promotion_price
		FROM
		tb_commodity c
		LEFT JOIN tb_collect_commodity cc ON c.id =
		cc.commodity_id
		INNER JOIN (
		SELECT
		MIN(cv.price) min_price,
		MIN(cv.promotion_price) min_promotion_price,
		csp.commodity_id
		FROM
		tb_commodity_select_property csp
		INNER JOIN tb_commodity_variable cv ON
		csp.select_property_row =
		cv.select_property_row
		GROUP BY
		csp.commodity_id
		) tmp ON tmp.commodity_id = c.id
		GROUP BY
		c.id
		ORDER BY
		count(cc.commodity_id) DESC
		LIMIT 10
	</select>

	<!-- public List<Commodity> selectByCommodityIds(List<Integer> commodityId); -->
	<select id="selectByCommodityIds"
		resultMap="CommodityMapWithSeller">
		SELECT
		c.id,
		c.title,
		c.seller_id,
		CONCAT(#{commodityCoverImageLocation},
		c.cover_image)
		cover_image,
		s.store_name,
		c_csp_cv.min_price,
		IFNULL(SUM(od.quantity),0) month_sale
		FROM
		tb_commodity c
		INNER JOIN
		tb_seller s ON c.seller_id = s.id
		INNER JOIN (
		SELECT
		c.id commodity_id,
		MIN(cv.price) min_price
		FROM
		tb_commodity c
		INNER JOIN
		tb_commodity_select_property csp ON c.id = csp.commodity_id
		INNER JOIN
		tb_commodity_variable cv ON csp.select_property_row =
		cv.select_property_row
		GROUP BY
		c.id
		) c_csp_cv ON c.id =
		c_csp_cv.commodity_id
		LEFT JOIN tb_order_detail od ON c.id =
		od.commodity_id
		LEFT JOIN tb_order o ON od.order_id = o.id
		WHERE
		c.id IN
		<foreach collection="commodityIds" item="commodityId"
			separator="," open="(" close=")">
			#{commodityId}
		</foreach>
		AND ABS(
		DATEDIFF(o.generate_time, now())
		) &lt; 31
		GROUP BY
		c.id
		ORDER BY
		<if test="sortType == 0">
			month_sale DESC
		</if>
		<if test="sortType == 1">
			min_price DESC
		</if>
		<if test="sortType == 2">
			min_price ASC
		</if>
	</select>

	<!-- public List<SellerProduct> selectBySellerId(Integer sellerId); -->
	<select id="selectBySellerId"
		resultType="com.timeuni.mybean.SellerProduct">
		SELECT
		c.id,
		c.title,
		c_csp_cv.min_price price,
		c.`status`,
		IFNULL(SUM(od.quantity), 0) month_sale,
		c_csp_cv.stock
		FROM
		tb_commodity
		c
		INNER JOIN (
		SELECT
		tmp.commodity_id,
		IFNULL(SUM(cv.stock), 0) stock,
		MIN(cv.price)
		min_price
		FROM
		tb_commodity_variable cv
		INNER JOIN (
		SELECT
		c.id commodity_id,
		csp.select_property_row `row`
		FROM
		tb_commodity c
		INNER JOIN tb_commodity_select_property csp ON c.id =
		csp.commodity_id
		GROUP BY
		csp.select_property_row
		) tmp ON cv.select_property_row =
		tmp.`row`
		GROUP BY
		tmp.commodity_id
		) c_csp_cv ON c.id =
		c_csp_cv.commodity_id
		LEFT JOIN tb_order_detail od ON c.id =
		od.commodity_id
		LEFT JOIN tb_order o ON od.order_id = o.id
		WHERE
		c.seller_id = #{sellerId}
		AND c.is_delete = 0
		GROUP BY
		c.id
		ORDER BY
		c.create_time desc
	</select>

	<!-- public Integer selectSumSaleQuantityBySellerId(Integer sellerId); -->
	<select id="selectSumSaleQuantityBySellerId"
		resultType="com.timeuni.mybean.ProductWithSaleQuantity">
		SELECT
		c.id commodity_id,
		c.title,
		IFNULL(SUM(od.quantity), 0)
		sale_quantity
		FROM
		tb_commodity c
		LEFT JOIN tb_order_detail od ON c.id =
		od.commodity_id
		LEFT JOIN tb_order o ON od.order_id = o.id
		WHERE
		c.seller_id = #{sellerId}
		GROUP BY
		c.id
	</select>

	<!-- public List<Commodity> selectByCommodityIdsAndSellerId(); -->
	<select id="selectByCommodityIdsAndSellerId"
		resultType="com.timeuni.bean.Commodity">
		SELECT
		c.id,
		c.title,
		CONCAT(#{coverLocation}, c.cover_image)
		cover_image,
		MIN(cv.price) min_price,
		tmp.commentQuantity
		FROM
		tb_commodity c
		INNER JOIN tb_commodity_select_property csp ON c.id =
		csp.commodity_id
		INNER JOIN tb_commodity_variable cv ON
		csp.select_property_row =
		cv.select_property_row
		INNER JOIN (
		SELECT
		c.id
		commodity_id,
		COUNT(co.id) commentQuantity
		FROM
		tb_commodity c
		LEFT JOIN
		tb_comment co ON c.id = co.commodity_id
		GROUP BY
		c.id
		) tmp ON c.id =
		tmp.commodity_id
		WHERE
		<!-- c.seller_id = #{sellerId} -->
		<foreach collection="commodityIds" open="c.id IN (" close=")"
			separator="," item="id">
			#{id}
		</foreach>
		GROUP BY
		c.id
		<if test="sortType==0">
			ORDER BY c.create_time DESC
		</if>
		<if test="sortType==1">
			ORDER BY c.create_time ASC
		</if>
		<if test="sortType==2">
			ORDER BY MIN(cv.price) DESC
		</if>
		<if test="sortType==3">
			ORDER BY MIN(cv.price) ASC
		</if>
		<if test="sortType==4">
			ORDER BY tmp.commentQuantity DESC
		</if>
	</select>
</mapper>